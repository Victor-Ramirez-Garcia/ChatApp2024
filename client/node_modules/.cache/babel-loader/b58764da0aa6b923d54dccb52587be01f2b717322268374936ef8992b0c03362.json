{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vramirez3678\\\\Documents\\\\Portland State University\\\\Winter Term 2024\\\\CS314\\\\Term Project\\\\ChatApp2024\\\\client\\\\src\\\\views\\\\registration.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport RegistrationComponent from '../components/RegistrationComponent';\n\n/**\r\n * This is registration page. A user will be able\r\n * to register using a first and last name, a email,\r\n * and a password.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Registration() {\n  _s();\n  // Lets use use useNavigate() which allows us to\n  // go to another route\n  const navigate = useNavigate();\n  // Array of state errors\n  const [errors, setErrors] = useState([]);\n\n  // Takes the form information, makes a POST HTTP request\n  const register = (e, formInfo) => {\n    e.preventDefault();\n\n    // Sends a POST HTTP request to the URL with the form\n    // information as data, then navigates to the given route.\n    // If there was errors when registering, loop through\n    // all errors and store them in 'errors' variable (to be\n    // use to display to the client).\n    axios.post(\"http://localhost:8000/api/users/register\", formInfo).then(() => {\n      navigate(\"/\");\n    }).catch(err => {\n      console.log(err); // Console the errors to see what is happening\n      const errorArr = [];\n      if (err.status === 400) {\n        // Loop through each error and store path and message of error in errorArr\n        for (const key of Object.keys(err.response.data.errors)) {\n          errorArr.push([err.response.data.errors[key].path, err.response.data.errors[key].message]);\n        }\n      } else if (err.status === 409) {\n        errorArr.push([\"email\", \"Email is already taken\"]);\n      }\n      setErrors(errorArr); // Store the errors\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Instant Messaging App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Registration Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(RegistrationComponent, {\n      onSubmitHandler: register,\n      onClickHandler: () => {\n        navigate(\"/\");\n      },\n      errors: errors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true);\n}\n_s(Registration, \"nvB24QwDdYtCe1GzvW57cGjM9Yo=\", false, function () {\n  return [useNavigate];\n});\n_c = Registration;\nvar _c;\n$RefreshReg$(_c, \"Registration\");","map":{"version":3,"names":["React","useState","axios","useNavigate","RegistrationComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","Registration","_s","navigate","errors","setErrors","register","e","formInfo","preventDefault","post","then","catch","err","console","log","errorArr","status","key","Object","keys","response","data","push","path","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmitHandler","onClickHandler","_c","$RefreshReg$"],"sources":["C:/Users/vramirez3678/Documents/Portland State University/Winter Term 2024/CS314/Term Project/ChatApp2024/client/src/views/registration.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport RegistrationComponent from '../components/RegistrationComponent';\r\n\r\n/**\r\n * This is registration page. A user will be able\r\n * to register using a first and last name, a email,\r\n * and a password.\r\n */\r\n\r\nexport function Registration() {\r\n        // Lets use use useNavigate() which allows us to\r\n        // go to another route\r\n        const navigate = useNavigate();\r\n        // Array of state errors\r\n        const [errors, setErrors] = useState([]);\r\n\r\n        // Takes the form information, makes a POST HTTP request\r\n        const register = (e, formInfo) => {\r\n                e.preventDefault();\r\n\r\n                // Sends a POST HTTP request to the URL with the form\r\n                // information as data, then navigates to the given route.\r\n                // If there was errors when registering, loop through\r\n                // all errors and store them in 'errors' variable (to be\r\n                // use to display to the client).\r\n                axios.post(\"http://localhost:8000/api/users/register\", formInfo)\r\n                .then(() => {\r\n                        navigate(\"/\");\r\n                })\r\n                .catch(err => {\r\n                        console.log(err); // Console the errors to see what is happening\r\n                        const errorArr = [];\r\n\r\n                        if (err.status === 400)\r\n                        {\r\n                                // Loop through each error and store path and message of error in errorArr\r\n                                for (const key of Object.keys(err.response.data.errors)) {\r\n                                        errorArr.push([err.response.data.errors[key].path, err.response.data.errors[key].message]);\r\n                                }\r\n                        }\r\n                        else if (err.status === 409)\r\n                        {\r\n                                errorArr.push([\"email\", \"Email is already taken\"]);\r\n                        }\r\n\r\n                        setErrors(errorArr); // Store the errors\r\n                })\r\n        }\r\n\r\n        return (\r\n                <>\r\n                        <h1>Instant Messaging App</h1>\r\n                        <h2>Registration Page</h2>\r\n                        <RegistrationComponent onSubmitHandler={register} onClickHandler={() => {navigate(\"/\")}} errors={errors} />\r\n                </>\r\n        );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,qBAAqB,MAAM,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAMA,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACvB;EACA;EACA,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B;EACA,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMa,QAAQ,GAAGA,CAACC,CAAC,EAAEC,QAAQ,KAAK;IAC1BD,CAAC,CAACE,cAAc,CAAC,CAAC;;IAElB;IACA;IACA;IACA;IACA;IACAf,KAAK,CAACgB,IAAI,CAAC,0CAA0C,EAAEF,QAAQ,CAAC,CAC/DG,IAAI,CAAC,MAAM;MACJR,QAAQ,CAAC,GAAG,CAAC;IACrB,CAAC,CAAC,CACDS,KAAK,CAACC,GAAG,IAAI;MACNC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC,CAAC;MAClB,MAAMG,QAAQ,GAAG,EAAE;MAEnB,IAAIH,GAAG,CAACI,MAAM,KAAK,GAAG,EACtB;QACQ;QACA,KAAK,MAAMC,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACP,GAAG,CAACQ,QAAQ,CAACC,IAAI,CAAClB,MAAM,CAAC,EAAE;UACjDY,QAAQ,CAACO,IAAI,CAAC,CAACV,GAAG,CAACQ,QAAQ,CAACC,IAAI,CAAClB,MAAM,CAACc,GAAG,CAAC,CAACM,IAAI,EAAEX,GAAG,CAACQ,QAAQ,CAACC,IAAI,CAAClB,MAAM,CAACc,GAAG,CAAC,CAACO,OAAO,CAAC,CAAC;QAClG;MACR,CAAC,MACI,IAAIZ,GAAG,CAACI,MAAM,KAAK,GAAG,EAC3B;QACQD,QAAQ,CAACO,IAAI,CAAC,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;MAC1D;MAEAlB,SAAS,CAACW,QAAQ,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;EACV,CAAC;EAED,oBACQlB,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBACQ5B,OAAA;MAAA4B,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BhC,OAAA;MAAA4B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BhC,OAAA,CAACF,qBAAqB;MAACmC,eAAe,EAAEzB,QAAS;MAAC0B,cAAc,EAAEA,CAAA,KAAM;QAAC7B,QAAQ,CAAC,GAAG,CAAC;MAAA,CAAE;MAACC,MAAM,EAAEA;IAAO;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACjH,CAAC;AAEnB;AAAC5B,EAAA,CA/CeD,YAAY;EAAA,QAGHN,WAAW;AAAA;AAAAsC,EAAA,GAHpBhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}