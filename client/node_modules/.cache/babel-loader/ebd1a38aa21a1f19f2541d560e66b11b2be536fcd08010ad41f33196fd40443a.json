{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vramirez3678\\\\Documents\\\\Portland State University\\\\Winter Term 2024\\\\CS314\\\\Term Project\\\\ChatApp2024\\\\client\\\\src\\\\views\\\\chat.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport MessageComponent from '../components/MessageComponent';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000', {\n  transports: ['websocket'],\n  withCredentials: true\n});\nexport function Chat(props) {\n  _s();\n  const {\n    user\n  } = props; // Component properties\n  const [contents, setContents] = useState([]);\n  // Navigation function to go to different routes\n  const navigate = useNavigate();\n  // Location function, where location.state has state information\n  const location = useLocation();\n\n  // Get conversation history\n  const getChatContents = useCallback(async () => {\n    // Get posts\n    const res = await axios.get(`http://localhost:8000/api/chats/posts/${location.state.chat}`);\n    const resPosts = Object.keys(res.data.posts).map(async key => {\n      // Post object\n      const post = {\n        _id: res.data.posts[key]._id,\n        content: res.data.posts[key].content,\n        timestamp: res.data.posts[key].timestamp\n      };\n\n      // Format Timestamp\n      post.timestamp = moment(post.timestamp).utc().format('YYYY-MM-DD HH:mm:ss');\n\n      // Get sender object\n      const res_user_1 = await axios.get(`http://localhost:8000/api/users/${res.data.posts[key]._senderID}`);\n      post.sender = res_user_1.data.user[0];\n\n      // Get recipient object\n      const res_user_2 = await axios.get(`http://localhost:8000/api/users/${res.data.posts[key]._recipientID}`);\n      post.recipient = res_user_2.data.user[0];\n      return post;\n    });\n    const postsArr = await Promise.all(resPosts);\n    setContents(postsArr);\n  }, [location.state.chat, setContents]);\n\n  // Ensures effect re-runs only when the function changes\n  useEffect(() => {\n    getChatContents();\n  }, [getChatContents]);\n\n  // Listen for real-time messages using Socket.io\n  useEffect(() => {\n    socket.on('receiveMessage', async newContent => {\n      // Post object\n      const post = {\n        _id: newContent.post._id,\n        content: newContent.post.content,\n        timestamp: newContent.post.timestamp\n      };\n\n      // Format Timestamp\n      post.timestamp = moment(post.timestamp).utc().format('YYYY-MM-DD HH:mm:ss');\n\n      // Get sender object\n      const res_user_1 = await axios.get(`http://localhost:8000/api/users/${newContent.post._senderID}`);\n      post.sender = res_user_1.data.user[0];\n\n      // Get recipient object\n      const res_user_2 = await axios.get(`http://localhost:8000/api/users/${newContent.post._recipientID}`);\n      post.recipient = res_user_2.data.user[0];\n      setContents(prevContent => [...prevContent, post]);\n    });\n    return () => {\n      socket.off('receiveMessage');\n    };\n  }, [setContents]);\n\n  // Send Message Handler\n  const onSendHandler = (e, formInfo) => {\n    e.preventDefault();\n    formInfo.sender = user._id;\n    formInfo.recipient = location.state.user;\n    formInfo.chat = location.state.chat;\n    socket.emit('sendMessage', formInfo);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: contents.map((content, key) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"(\", content.sender.email, \") \", content.content, \" (Send at \", content.timestamp, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 36\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MessageComponent, {\n      onSendHandler: onSendHandler,\n      onLeaveHandler: () => navigate(\"/main\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Chat, \"5AZt+/fRt2x3d0vd+t4ldroFkEc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useCallback","useState","useEffect","axios","useNavigate","useLocation","io","MessageComponent","moment","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","transports","withCredentials","Chat","props","_s","user","contents","setContents","navigate","location","getChatContents","res","get","state","chat","resPosts","Object","keys","data","posts","map","key","post","_id","content","timestamp","utc","format","res_user_1","_senderID","sender","res_user_2","_recipientID","recipient","postsArr","Promise","all","on","newContent","prevContent","off","onSendHandler","e","formInfo","preventDefault","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","email","onLeaveHandler","_c","$RefreshReg$"],"sources":["C:/Users/vramirez3678/Documents/Portland State University/Winter Term 2024/CS314/Term Project/ChatApp2024/client/src/views/chat.js"],"sourcesContent":["import { useCallback, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport io from 'socket.io-client';\r\nimport MessageComponent from '../components/MessageComponent';\r\nimport moment from 'moment';\r\n\r\nconst socket = io('http://localhost:8000', {\r\n    transports: ['websocket'],\r\n    withCredentials: true,\r\n});\r\n\r\nexport function Chat(props) {\r\n    const { user } = props; // Component properties\r\n    const [contents, setContents] = useState([]);\r\n    // Navigation function to go to different routes\r\n    const navigate = useNavigate();\r\n    // Location function, where location.state has state information\r\n    const location = useLocation();\r\n\r\n    // Get conversation history\r\n    const getChatContents = useCallback(async() => {\r\n        // Get posts\r\n        const res = await axios.get(`http://localhost:8000/api/chats/posts/${location.state.chat}`);\r\n\r\n        const resPosts = Object.keys(res.data.posts).map(async(key) => {\r\n            // Post object\r\n            const post = {\r\n                _id: res.data.posts[key]._id,\r\n                content: res.data.posts[key].content,\r\n                timestamp: res.data.posts[key].timestamp,\r\n            }\r\n\r\n            // Format Timestamp\r\n            post.timestamp = moment(post.timestamp).utc().format('YYYY-MM-DD HH:mm:ss');\r\n\r\n            // Get sender object\r\n            const res_user_1 = await axios.get(`http://localhost:8000/api/users/${res.data.posts[key]._senderID}`)\r\n            post.sender = res_user_1.data.user[0];\r\n\r\n            // Get recipient object\r\n            const res_user_2 = await axios.get(`http://localhost:8000/api/users/${res.data.posts[key]._recipientID}`)\r\n            post.recipient = res_user_2.data.user[0];\r\n\r\n            return post;\r\n        })\r\n\r\n        const postsArr = await Promise.all(resPosts);\r\n        setContents(postsArr);\r\n    }, [location.state.chat, setContents]);\r\n    \r\n    // Ensures effect re-runs only when the function changes\r\n    useEffect(() => {getChatContents();}, [getChatContents]);\r\n\r\n    // Listen for real-time messages using Socket.io\r\n    useEffect(() => {\r\n        socket.on('receiveMessage', async(newContent) => {\r\n            // Post object\r\n            const post = {\r\n                _id: newContent.post._id,\r\n                content: newContent.post.content,\r\n                timestamp: newContent.post.timestamp,\r\n            }\r\n\r\n            // Format Timestamp\r\n            post.timestamp = moment(post.timestamp).utc().format('YYYY-MM-DD HH:mm:ss');\r\n\r\n            // Get sender object\r\n            const res_user_1 = await axios.get(`http://localhost:8000/api/users/${newContent.post._senderID}`)\r\n            post.sender = res_user_1.data.user[0];\r\n\r\n            // Get recipient object\r\n            const res_user_2 = await axios.get(`http://localhost:8000/api/users/${newContent.post._recipientID}`)\r\n            post.recipient = res_user_2.data.user[0];\r\n\r\n            setContents((prevContent) => [...prevContent, post]);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('receiveMessage');\r\n        }\r\n    }, [setContents]);\r\n\r\n    // Send Message Handler\r\n    const onSendHandler = (e, formInfo) => {\r\n        e.preventDefault();\r\n        formInfo.sender = user._id;\r\n        formInfo.recipient = location.state.user;\r\n        formInfo.chat = location.state.chat;\r\n\r\n        socket.emit('sendMessage', formInfo);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Chat</h1>\r\n            <div>\r\n                {contents.map((content, key) => (\r\n                    <div key={key}><strong>({content.sender.email}) {content.content} (Send at {content.timestamp})</strong></div>\r\n                ))}\r\n            </div>\r\n            <MessageComponent onSendHandler={onSendHandler} onLeaveHandler={() => navigate(\"/main\")} />\r\n        </>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5B,MAAMC,MAAM,GAAGP,EAAE,CAAC,uBAAuB,EAAE;EACvCQ,UAAU,EAAE,CAAC,WAAW,CAAC;EACzBC,eAAe,EAAE;AACrB,CAAC,CAAC;AAEF,OAAO,SAASC,IAAIA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAK,CAAC,GAAGF,KAAK,CAAC,CAAC;EACxB,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC5C;EACA,MAAMqB,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAC9B;EACA,MAAMmB,QAAQ,GAAGlB,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMmB,eAAe,GAAGxB,WAAW,CAAC,YAAW;IAC3C;IACA,MAAMyB,GAAG,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAAC,yCAAyCH,QAAQ,CAACI,KAAK,CAACC,IAAI,EAAE,CAAC;IAE3F,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACN,GAAG,CAACO,IAAI,CAACC,KAAK,CAAC,CAACC,GAAG,CAAC,MAAMC,GAAG,IAAK;MAC3D;MACA,MAAMC,IAAI,GAAG;QACTC,GAAG,EAAEZ,GAAG,CAACO,IAAI,CAACC,KAAK,CAACE,GAAG,CAAC,CAACE,GAAG;QAC5BC,OAAO,EAAEb,GAAG,CAACO,IAAI,CAACC,KAAK,CAACE,GAAG,CAAC,CAACG,OAAO;QACpCC,SAAS,EAAEd,GAAG,CAACO,IAAI,CAACC,KAAK,CAACE,GAAG,CAAC,CAACI;MACnC,CAAC;;MAED;MACAH,IAAI,CAACG,SAAS,GAAG/B,MAAM,CAAC4B,IAAI,CAACG,SAAS,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,MAAM,CAAC,qBAAqB,CAAC;;MAE3E;MACA,MAAMC,UAAU,GAAG,MAAMvC,KAAK,CAACuB,GAAG,CAAC,mCAAmCD,GAAG,CAACO,IAAI,CAACC,KAAK,CAACE,GAAG,CAAC,CAACQ,SAAS,EAAE,CAAC;MACtGP,IAAI,CAACQ,MAAM,GAAGF,UAAU,CAACV,IAAI,CAACb,IAAI,CAAC,CAAC,CAAC;;MAErC;MACA,MAAM0B,UAAU,GAAG,MAAM1C,KAAK,CAACuB,GAAG,CAAC,mCAAmCD,GAAG,CAACO,IAAI,CAACC,KAAK,CAACE,GAAG,CAAC,CAACW,YAAY,EAAE,CAAC;MACzGV,IAAI,CAACW,SAAS,GAAGF,UAAU,CAACb,IAAI,CAACb,IAAI,CAAC,CAAC,CAAC;MAExC,OAAOiB,IAAI;IACf,CAAC,CAAC;IAEF,MAAMY,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACrB,QAAQ,CAAC;IAC5CR,WAAW,CAAC2B,QAAQ,CAAC;EACzB,CAAC,EAAE,CAACzB,QAAQ,CAACI,KAAK,CAACC,IAAI,EAAEP,WAAW,CAAC,CAAC;;EAEtC;EACAnB,SAAS,CAAC,MAAM;IAACsB,eAAe,CAAC,CAAC;EAAC,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;;EAExD;EACAtB,SAAS,CAAC,MAAM;IACZW,MAAM,CAACsC,EAAE,CAAC,gBAAgB,EAAE,MAAMC,UAAU,IAAK;MAC7C;MACA,MAAMhB,IAAI,GAAG;QACTC,GAAG,EAAEe,UAAU,CAAChB,IAAI,CAACC,GAAG;QACxBC,OAAO,EAAEc,UAAU,CAAChB,IAAI,CAACE,OAAO;QAChCC,SAAS,EAAEa,UAAU,CAAChB,IAAI,CAACG;MAC/B,CAAC;;MAED;MACAH,IAAI,CAACG,SAAS,GAAG/B,MAAM,CAAC4B,IAAI,CAACG,SAAS,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,MAAM,CAAC,qBAAqB,CAAC;;MAE3E;MACA,MAAMC,UAAU,GAAG,MAAMvC,KAAK,CAACuB,GAAG,CAAC,mCAAmC0B,UAAU,CAAChB,IAAI,CAACO,SAAS,EAAE,CAAC;MAClGP,IAAI,CAACQ,MAAM,GAAGF,UAAU,CAACV,IAAI,CAACb,IAAI,CAAC,CAAC,CAAC;;MAErC;MACA,MAAM0B,UAAU,GAAG,MAAM1C,KAAK,CAACuB,GAAG,CAAC,mCAAmC0B,UAAU,CAAChB,IAAI,CAACU,YAAY,EAAE,CAAC;MACrGV,IAAI,CAACW,SAAS,GAAGF,UAAU,CAACb,IAAI,CAACb,IAAI,CAAC,CAAC,CAAC;MAExCE,WAAW,CAAEgC,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAEjB,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC;IAEF,OAAO,MAAM;MACTvB,MAAM,CAACyC,GAAG,CAAC,gBAAgB,CAAC;IAChC,CAAC;EACL,CAAC,EAAE,CAACjC,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMkC,aAAa,GAAGA,CAACC,CAAC,EAAEC,QAAQ,KAAK;IACnCD,CAAC,CAACE,cAAc,CAAC,CAAC;IAClBD,QAAQ,CAACb,MAAM,GAAGzB,IAAI,CAACkB,GAAG;IAC1BoB,QAAQ,CAACV,SAAS,GAAGxB,QAAQ,CAACI,KAAK,CAACR,IAAI;IACxCsC,QAAQ,CAAC7B,IAAI,GAAGL,QAAQ,CAACI,KAAK,CAACC,IAAI;IAEnCf,MAAM,CAAC8C,IAAI,CAAC,aAAa,EAAEF,QAAQ,CAAC;EACxC,CAAC;EAED,oBACI/C,OAAA,CAAAE,SAAA;IAAAgD,QAAA,gBACIlD,OAAA;MAAAkD,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACbtD,OAAA;MAAAkD,QAAA,EACKxC,QAAQ,CAACc,GAAG,CAAC,CAACI,OAAO,EAAEH,GAAG,kBACvBzB,OAAA;QAAAkD,QAAA,eAAelD,OAAA;UAAAkD,QAAA,GAAQ,GAAC,EAACtB,OAAO,CAACM,MAAM,CAACqB,KAAK,EAAC,IAAE,EAAC3B,OAAO,CAACA,OAAO,EAAC,YAAU,EAACA,OAAO,CAACC,SAAS,EAAC,GAAC;QAAA;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC,GAA9F7B,GAAG;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgG,CAChH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNtD,OAAA,CAACH,gBAAgB;MAACgD,aAAa,EAAEA,aAAc;MAACW,cAAc,EAAEA,CAAA,KAAM5C,QAAQ,CAAC,OAAO;IAAE;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC7F,CAAC;AAEX;AAAC9C,EAAA,CA5FeF,IAAI;EAAA,QAICZ,WAAW,EAEXC,WAAW;AAAA;AAAA8D,EAAA,GANhBnD,IAAI;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}